version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      WORKFLOW_ID:
        description: Workflow ID
        type: string    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.WORKFLOW_ID >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.WORKFLOW_ID >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.WORKFLOW_ID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      WORKFLOW_ID:
        type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/3NmzRA5q2KhvgyJdi14TuG/migration_<< parameters.WORKFLOW_ID >>)
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible

  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0
   
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run: 
            name: Front-end analysis
            command: |
              cd frontend
              npm install
              # npm install oauth-sign@^0.9.0
              npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Back-end analysis
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f7:0e:88:49:ae:52:56:fd:e1:1d:98:9f:45:25:ad:c8"]
      - attach_workspace:
          at: ~/
      - install_awscli
      - install_ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}      

  run-migrations:
    docker:
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
              cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl --insecure https://kvdb.io/3NmzRA5q2KhvgyJdi14TuG/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}     

  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - install_nodejs
      - install_awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:      
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
                    
  deploy-backend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f7:0e:88:49:ae:52:56:fd:e1:1d:98:9f:45:25:ad:c8"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - install_ansible
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            echo "Content  of the inventory.txt file is -------: "
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7} 

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://${BACKEND_IP}:3030
            if curl -s $API_URL/api/status | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            echo $URL
            if curl -s $URL | grep "Welcome"
            then
                exit 0
            else
                exit 1
            fi
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}  

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Save Blue WorkflowID to kvdb.io
          command: |
            export BLUE_WORKFLOW_ID=$(aws cloudformation \
                        list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                        --no-paginate --output text)
            export WORKFLOW_ID=$(echo $BLUE_WORKFLOW_ID | cut -d'-' -f 2)
            echo $WORKFLOW_ID >> ~/BlueWorkflowId.txt
            echo $WORKFLOW_ID
            cat ~/BlueWorkflowId.txt
            curl https://kvdb.io/3NmzRA5q2KhvgyJdi14TuG/blue_workflow_id -d "${WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name blue-stack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}  

  cleanup:
      docker:
        - image: cimg/base:stable
      steps:
        - checkout
        - install_awscli
        - install_nodejs
        - run:
            name: Delete old stack
            command: |
              export OldWorkflowID=$(curl --insecure https://kvdb.io/3NmzRA5q2KhvgyJdi14TuG/blue_workflow_id)
              echo OldWorkflowID: "${OldWorkflowID}"
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              echo Stack names: "${STACKS[@]}"

              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
                aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
                aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
                echo '------------------ CLEANUP COMPLETE -----------------'
              else
                echo '------------------ CLEANUP FAILED -----------------'
              fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]